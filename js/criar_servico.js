// Vari√°veis globais
let uploadedImages = [];
let selectedAmenities = ['üöø Banho completo', '‚úÇÔ∏è Tosquia profissional', 'üè† Servi√ßo ao domic√≠lio'];
let isPreviewMode = false;

// Upload de imagens
function triggerFileInput() {
    document.getElementById('imageInput').click();
}

function handleFileSelect(event) {
    const files = Array.from(event.target.files);
    processFiles(files);
}

function handleDragOver(event) {
    event.preventDefault();
    event.currentTarget.classList.add('dragover');
}

function handleDragLeave(event) {
    event.currentTarget.classList.remove('dragover');
}

function handleDrop(event) {
    event.preventDefault();
    event.currentTarget.classList.remove('dragover');
    const files = Array.from(event.dataTransfer.files);
    processFiles(files);
}

function processFiles(files) {
    files.forEach(file => {
        if (file.type.startsWith('image/') && uploadedImages.length < 6) {
            const reader = new FileReader();
            reader.onload = function(e) {
                addImageToGrid(e.target.result, file.name);
            };
            reader.readAsDataURL(file);
        }
    });
}

function addImageToGrid(src, name) {
    const imageGrid = document.getElementById('imageGrid');
    const imagePreview = document.createElement('div');
    imagePreview.className = 'image-preview';
    imagePreview.innerHTML = `
        <img src="${src}" alt="${name}">
        <button class="remove-btn" onclick="removeImage(this)">√ó</button>
    `;
    imageGrid.appendChild(imagePreview);
    uploadedImages.push({ src, name });
}

function removeImage(button) {
    const preview = button.parentElement;
    const imgSrc = preview.querySelector('img').src;
    
    // Remove da array
    uploadedImages = uploadedImages.filter(img => img.src !== imgSrc);
    
    // Remove do DOM
    preview.remove();
}

// Comodidades
function toggleAmenityCheck(checkbox) {
    const amenityItem = checkbox.parentElement;
    const amenityText = amenityItem.querySelector('span').textContent;
    
    if (checkbox.checked) {
        amenityItem.classList.add('selected');
        if (!selectedAmenities.includes(amenityText)) {
            selectedAmenities.push(amenityText);
        }
    } else {
        amenityItem.classList.remove('selected');
        selectedAmenities = selectedAmenities.filter(item => item !== amenityText);
    }
}

function addCustomAmenity() {
    const input = document.getElementById('customAmenity');
    const amenityText = input.value.trim();
    
    if (amenityText) {
        const amenitiesGrid = document.getElementById('amenitiesGrid');
        const amenityItem = document.createElement('div');
        amenityItem.className = 'amenity-item selected';
        amenityItem.innerHTML = `
            <input type="checkbox" checked onchange="toggleAmenityCheck(this)">
            <span>‚≠ê ${amenityText}</span>
        `;
        amenitiesGrid.appendChild(amenityItem);
        
        selectedAmenities.push(`‚≠ê ${amenityText}`);
        input.value = '';
    }
}

// Localiza√ß√£o
function searchLocation(query) {
    const suggestions = document.getElementById('locationSuggestions');
    
    if (query.length < 3) {
        suggestions.style.display = 'none';
        return;
    }
    
    // Simula√ß√£o de sugest√µes (em produ√ß√£o, usar API de geocoding)
    const mockSuggestions = [
        'Aveiro, Portugal',
        'Aveiro Centro, Portugal',
        'Universidade de Aveiro, Portugal',
        'Gafanha da Nazar√©, Aveiro',
        '√çlhavo, Aveiro'
    ];
    
    const filteredSuggestions = mockSuggestions.filter(location => 
        location.toLowerCase().includes(query.toLowerCase())
    );
    
    if (filteredSuggestions.length > 0) {
        suggestions.innerHTML = filteredSuggestions.map(location => 
            `<div class="location-suggestion" onclick="selectLocation('${location}')">${location}</div>`
        ).join('');
        suggestions.style.display = 'block';
    } else {
        suggestions.style.display = 'none';
    }
}

function selectLocation(location) {
    document.getElementById('locationInput').value = location;
    document.getElementById('locationSuggestions').style.display = 'none';
    
    // Simular atualiza√ß√£o do mapa
    const mapContainer = document.getElementById('mapContainer');
    mapContainer.innerHTML = `
        <div style="text-align: center; color: #196085;">
            <p>üìç ${location}</p>
            <small>Localiza√ß√£o selecionada</small>
        </div>
    `;
}

// Configura√ß√µes de hor√°rio
function toggleCustomSchedule() {
    const availability = document.getElementById('availability').value;
    const customSchedule = document.getElementById('customSchedule');
    
    if (availability === 'custom') {
        customSchedule.classList.add('show');
    } else {
        customSchedule.classList.remove('show');
    }
}

function toggleDay(dayElement) {
    const checkbox = dayElement.querySelector('input[type="checkbox"]');
    checkbox.checked = !checkbox.checked;
    
    if (checkbox.checked) {
        dayElement.classList.add('selected');
    } else {
        dayElement.classList.remove('selected');
    }
}

// Pr√©-visualiza√ß√£o
function togglePreview() {
    const cards = document.querySelectorAll('.card');
    isPreviewMode = !isPreviewMode;
    
    cards.forEach(card => {
        if (isPreviewMode) {
            card.classList.add('preview-mode');
            // Adicionar header de pr√©-visualiza√ß√£o apenas nos cards principais
            if (!card.querySelector('.preview-header')) {
                const previewHeader = document.createElement('div');
                previewHeader.className = 'preview-header';
                previewHeader.textContent = 'üëÅÔ∏è Modo Pr√©-visualiza√ß√£o - Como os clientes ver√£o';
                card.insertBefore(previewHeader, card.firstChild);
            }
        } else {
            card.classList.remove('preview-mode');
            const previewHeader = card.querySelector('.preview-header');
            if (previewHeader) {
                previewHeader.remove();
            }
        }
    });
    
    // Atualizar bot√£o
    const previewBtn = document.querySelector('.btn-outline');
    previewBtn.textContent = isPreviewMode ? '‚úèÔ∏è Modo Edi√ß√£o' : 'üëÅÔ∏è Pr√©-visualizar';
}

// Valida√ß√£o e salvamento
function validateForm() {
    let isValid = true;
    const errors = [];
    
    // Validar nome do servi√ßo
    const serviceName = document.getElementById('serviceName').value.trim();
    if (!serviceName) {
        isValid = false;
        errors.push('Nome do servi√ßo √© obrigat√≥rio');
        document.getElementById('serviceName').classList.add('input-error');
    } else {
        document.getElementById('serviceName').classList.remove('input-error');
    }
    
    // Validar descri√ß√£o
    const description = document.getElementById('serviceDescription').value.trim();
    if (!description || description.length < 50) {
        isValid = false;
        errors.push('Descri√ß√£o deve ter pelo menos 50 caracteres');
        document.getElementById('serviceDescription').classList.add('input-error');
    } else {
        document.getElementById('serviceDescription').classList.remove('input-error');
    }
    
    // Validar pre√ßo
    const price = parseFloat(document.getElementById('servicePrice').value);
    if (!price || price <= 0) {
        isValid = false;
        errors.push('Pre√ßo deve ser maior que zero');
        document.getElementById('servicePrice').classList.add('input-error');
    } else {
        document.getElementById('servicePrice').classList.remove('input-error');
    }
    
    // Validar localiza√ß√£o
    const location = document.getElementById('locationInput').value.trim();
    if (!location) {
        isValid = false;
        errors.push('Localiza√ß√£o √© obrigat√≥ria');
        document.getElementById('locationInput').classList.add('input-error');
    } else {
        document.getElementById('locationInput').classList.remove('input-error');
    }
    
    return { isValid, errors };
}

function showMessage(message, type = 'success') {
    const messageDiv = document.getElementById('successMessage');
    messageDiv.textContent = message;
    messageDiv.className = type === 'success' ? 'success-message' : 'error-message';
    messageDiv.style.display = 'block';
    
    // Auto-hide ap√≥s 5 segundos
    setTimeout(() => {
        messageDiv.style.display = 'none';
    }, 5000);
    
    // Scroll para o topo
    window.scrollTo({ top: 0, behavior: 'smooth' });
}

function saveDraft() {
    const serviceData = collectFormData();
    
    // Simular salvamento (em produ√ß√£o, enviar para API)
    console.log('Salvando rascunho:', serviceData);
    
    showMessage('‚úÖ Rascunho salvo com sucesso!');
    
    // Atualizar estado
    document.getElementById('serviceStatus').value = 'draft';
}

function publishService() {
    const validation = validateForm();
    
    if (!validation.isValid) {
        showMessage('‚ùå Corrija os erros antes de publicar: ' + validation.errors.join(', '), 'error');
        return;
    }
    
    const serviceData = collectFormData();
    
    // Simular publica√ß√£o (em produ√ß√£o, enviar para API)
    console.log('Publicando servi√ßo:', serviceData);
    
    showMessage('üöÄ Servi√ßo publicado com sucesso! Agora est√° vis√≠vel para os clientes.');
    
    // Atualizar estado
    document.getElementById('serviceStatus').value = 'active';
    
    // Simular atualiza√ß√£o de estat√≠sticas
    updateStats();
}

function collectFormData() {
    return {
        name: document.getElementById('serviceName').value,
        description: document.getElementById('serviceDescription').value,
        price: parseFloat(document.getElementById('servicePrice').value),
        location: document.getElementById('locationInput').value,
        images: uploadedImages,
        amenities: selectedAmenities,
        status: document.getElementById('serviceStatus').value,
        instantBooking: document.getElementById('instantBooking').checked,
        emailNotifications: document.getElementById('emailNotifications').checked,
        availability: document.getElementById('availability').value,
        startTime: document.getElementById('startTime').value,
        endTime: document.getElementById('endTime').value,
        customDays: getSelectedDays()
    };
}

function getSelectedDays() {
    const days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];
    return days.filter(day => document.getElementById(day).checked);
}

function updateStats() {
    // Simular incremento das estat√≠sticas
    const stats = document.querySelectorAll('.stat-number');
    stats[0].textContent = parseInt(stats[0].textContent) + Math.floor(Math.random() * 10) + 1; // Visualiza√ß√µes
    stats[1].textContent = parseInt(stats[1].textContent) + Math.floor(Math.random() * 3) + 1; // Contactos
}

// Event listeners para inicializa√ß√£o
document.addEventListener('DOMContentLoaded', function() {
    // Inicializar comodidades selecionadas
    document.querySelectorAll('.amenity-item input[type="checkbox"]').forEach(checkbox => {
        if (checkbox.checked) {
            checkbox.parentElement.classList.add('selected');
        }
    });
    
    // Prevenir submit do formul√°rio ao pressionar Enter
    document.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && e.target.tagName !== 'TEXTAREA') {
            e.preventDefault();
        }
    });
    
    // Auto-save a cada 2 minutos (opcional)
    setInterval(function() {
        if (document.getElementById('serviceStatus').value === 'draft') {
            saveDraft();
        }
    }, 120000); // 2 minutos
});

// Fun√ß√£o para limpar formul√°rio
function clearForm() {
    if (confirm('Tem certeza que deseja limpar todos os dados?')) {
        document.getElementById('serviceName').value = '';
        document.getElementById('serviceDescription').value = '';
        document.getElementById('servicePrice').value = '';
        document.getElementById('locationInput').value = '';
        
        // Limpar imagens
        document.getElementById('imageGrid').innerHTML = '';
        uploadedImages = [];
        
        // Desmarcar comodidades
        document.querySelectorAll('.amenity-item').forEach(item => {
            item.classList.remove('selected');
            item.querySelector('input[type="checkbox"]').checked = false;
        });
        selectedAmenities = [];
        
        showMessage('üìù Formul√°rio limpo com sucesso!');
    }
}

// Fun√ß√£o para duplicar servi√ßo
function duplicateService() {
    const currentData = collectFormData();
    currentData.name = currentData.name + ' (C√≥pia)';
    
    // Simular cria√ß√£o de novo servi√ßo
    console.log('Duplicando servi√ßo:', currentData);
    
    showMessage('üìã Servi√ßo duplicado! Edite as informa√ß√µes conforme necess√°rio.');
}